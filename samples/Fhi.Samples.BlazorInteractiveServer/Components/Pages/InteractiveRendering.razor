@page "/interactive-rendering"
@rendermode InteractiveServer
@using Client.BlazorInteractiveServer.Services
@using Microsoft.AspNetCore.Authorization
@inject HealthRecordService HealthRecordService;
@inject NavigationService NavigationService;
@inject IJSRuntime JS;

<PageTitle>Demo of Interactive Server Rendering</PageTitle>

<h1>Health data</h1>

<p>This page is using Interactive Server rendering. This will use SignalR for communication with the server. The HttpContext is not available for onclick 
    event (button). It uses HubCallerContext where user is populated from the cookie during rendering.</p>

<button class="btn btn-primary" @onclick="FetchHealthRecords">Get Health records</button>


@if (isLoading)
{
    <p><em>Loading...</em></p>
}

@if(Records != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Created</th>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in Records)
            {
                <tr>
                    <td>@record.CreatedAt.ToShortDateString()</td>
                    <td>@record.Name</td>
                    <td>@record.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
    
@code {
    private IEnumerable<HealthRecord>? Records;
    private bool isLoading = false;

    private async Task FetchHealthRecords()
    {
        isLoading = true;
        var result = await HealthRecordService.GetHealthrecords();
        if (!result.IsError)
        {
            Records = result.Data;
        }
        else
        {
            NavigationService.RedirectToLogin();
        }
        isLoading = false;
    }
}
